{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryzen pro\\\\Desktop\\\\Year 3 Sem 1\\\\AF\\\\Assignment 2\\\\frontend\\\\src\\\\components\\\\FloatingCountriesOrb.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloatingCountriesOrb = ({\n  countries\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!countries || countries.length === 0) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create a large sphere (the orb)\n    const orbGeometry = new THREE.SphereGeometry(5, 32, 32);\n    const orbMaterial = new THREE.MeshBasicMaterial({\n      color: 0x3b82f6,\n      transparent: true,\n      opacity: 0.1,\n      wireframe: true\n    });\n    const orb = new THREE.Mesh(orbGeometry, orbMaterial);\n    scene.add(orb);\n\n    // Create a smaller inner sphere\n    const innerOrbGeometry = new THREE.SphereGeometry(4.5, 32, 32);\n    const innerOrbMaterial = new THREE.MeshBasicMaterial({\n      color: 0x60a5fa,\n      transparent: true,\n      opacity: 0.05\n    });\n    const innerOrb = new THREE.Mesh(innerOrbGeometry, innerOrbMaterial);\n    scene.add(innerOrb);\n\n    // Create text sprites for countries\n    const countrySprites = [];\n    const sampleCountries = countries.slice(0, 30); // Limit to 30 countries for performance\n\n    sampleCountries.forEach((country, index) => {\n      // Create a canvas for the text\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      canvas.width = 256;\n      canvas.height = 128;\n\n      // Draw text on canvas\n      context.fillStyle = 'rgba(0, 0, 0, 0)';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      context.font = '20px Roboto Mono';\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.fillText(country.name.common, canvas.width / 2, canvas.height / 2);\n\n      // Create texture from canvas\n      const texture = new THREE.CanvasTexture(canvas);\n      const material = new THREE.SpriteMaterial({\n        map: texture,\n        transparent: true,\n        opacity: 0.8\n      });\n      const sprite = new THREE.Sprite(material);\n\n      // Position the sprite randomly within the orb\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(2 * Math.random() - 1);\n      const radius = 4 * Math.random() + 0.5; // Random radius between 0.5 and 4.5\n\n      sprite.position.x = radius * Math.sin(phi) * Math.cos(theta);\n      sprite.position.y = radius * Math.sin(phi) * Math.sin(theta);\n      sprite.position.z = radius * Math.cos(phi);\n      sprite.scale.set(2, 1, 1);\n      scene.add(sprite);\n      countrySprites.push({\n        sprite,\n        initialPosition: {\n          ...sprite.position\n        },\n        speed: 0.0003 + Math.random() * 0.0005,\n        // Even slower speed\n        direction: new THREE.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize()\n      });\n    });\n\n    // Position camera\n    camera.position.z = 10;\n\n    // Animation\n    let frame = 0;\n    const animate = () => {\n      frame = requestAnimationFrame(animate);\n\n      // Rotate the orb slowly\n      orb.rotation.x += 0.0002;\n      orb.rotation.y += 0.0002;\n      innerOrb.rotation.x -= 0.0001;\n      innerOrb.rotation.y -= 0.0001;\n\n      // Move country sprites\n      countrySprites.forEach(item => {\n        // Move in the direction with the defined speed\n        item.sprite.position.x += item.direction.x * item.speed;\n        item.sprite.position.y += item.direction.y * item.speed;\n        item.sprite.position.z += item.direction.z * item.speed;\n\n        // Check if the sprite is too far from its initial position\n        const distance = new THREE.Vector3().subVectors(item.sprite.position, item.initialPosition).length();\n\n        // If too far, reverse direction\n        if (distance > 1.5) {\n          item.direction.negate();\n        }\n\n        // Always face the camera\n        item.sprite.lookAt(camera.position);\n      });\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(frame);\n\n      // Properly dispose of all resources\n      countrySprites.forEach(item => {\n        if (item.sprite.material.map) {\n          item.sprite.material.map.dispose();\n        }\n        item.sprite.material.dispose();\n      });\n      orbGeometry.dispose();\n      orbMaterial.dispose();\n      innerOrbGeometry.dispose();\n      innerOrbMaterial.dispose();\n\n      // Remove from DOM\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n\n      // Dispose renderer\n      renderer.dispose();\n    };\n  }, [countries]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: 0,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(FloatingCountriesOrb, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = FloatingCountriesOrb;\nexport default FloatingCountriesOrb;\nvar _c;\n$RefreshReg$(_c, \"FloatingCountriesOrb\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","FloatingCountriesOrb","countries","_s","mountRef","length","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","antialias","setSize","setClearColor","current","appendChild","domElement","orbGeometry","SphereGeometry","orbMaterial","MeshBasicMaterial","color","transparent","opacity","wireframe","orb","Mesh","add","innerOrbGeometry","innerOrbMaterial","innerOrb","countrySprites","sampleCountries","slice","forEach","country","index","canvas","document","createElement","context","getContext","width","height","fillStyle","fillRect","font","textAlign","fillText","name","common","texture","CanvasTexture","material","SpriteMaterial","map","sprite","Sprite","theta","Math","random","PI","phi","acos","radius","position","x","sin","cos","y","z","scale","set","push","initialPosition","speed","direction","Vector3","normalize","frame","animate","requestAnimationFrame","rotation","item","distance","subVectors","negate","lookAt","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","removeChild","ref","style","top","left","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ryzen pro/Desktop/Year 3 Sem 1/AF/Assignment 2/frontend/src/components/FloatingCountriesOrb.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst FloatingCountriesOrb = ({ countries }) => {\n  const mountRef = useRef(null);\n  \n  useEffect(() => {\n    if (!countries || countries.length === 0) return;\n    \n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    \n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.appendChild(renderer.domElement);\n    \n    // Create a large sphere (the orb)\n    const orbGeometry = new THREE.SphereGeometry(5, 32, 32);\n    const orbMaterial = new THREE.MeshBasicMaterial({ \n      color: 0x3b82f6, \n      transparent: true, \n      opacity: 0.1,\n      wireframe: true\n    });\n    const orb = new THREE.Mesh(orbGeometry, orbMaterial);\n    scene.add(orb);\n    \n    // Create a smaller inner sphere\n    const innerOrbGeometry = new THREE.SphereGeometry(4.5, 32, 32);\n    const innerOrbMaterial = new THREE.MeshBasicMaterial({ \n      color: 0x60a5fa, \n      transparent: true, \n      opacity: 0.05\n    });\n    const innerOrb = new THREE.Mesh(innerOrbGeometry, innerOrbMaterial);\n    scene.add(innerOrb);\n    \n    // Create text sprites for countries\n    const countrySprites = [];\n    const sampleCountries = countries.slice(0, 30); // Limit to 30 countries for performance\n    \n    sampleCountries.forEach((country, index) => {\n      // Create a canvas for the text\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      canvas.width = 256;\n      canvas.height = 128;\n      \n      // Draw text on canvas\n      context.fillStyle = 'rgba(0, 0, 0, 0)';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      context.font = '20px Roboto Mono';\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.fillText(country.name.common, canvas.width / 2, canvas.height / 2);\n      \n      // Create texture from canvas\n      const texture = new THREE.CanvasTexture(canvas);\n      const material = new THREE.SpriteMaterial({ \n        map: texture,\n        transparent: true,\n        opacity: 0.8\n      });\n      \n      const sprite = new THREE.Sprite(material);\n      \n      // Position the sprite randomly within the orb\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(2 * Math.random() - 1);\n      const radius = 4 * Math.random() + 0.5; // Random radius between 0.5 and 4.5\n      \n      sprite.position.x = radius * Math.sin(phi) * Math.cos(theta);\n      sprite.position.y = radius * Math.sin(phi) * Math.sin(theta);\n      sprite.position.z = radius * Math.cos(phi);\n      \n      sprite.scale.set(2, 1, 1);\n      scene.add(sprite);\n      countrySprites.push({\n        sprite,\n        initialPosition: { ...sprite.position },\n        speed: 0.0003 + Math.random() * 0.0005, // Even slower speed\n        direction: new THREE.Vector3(\n          Math.random() - 0.5,\n          Math.random() - 0.5,\n          Math.random() - 0.5\n        ).normalize()\n      });\n    });\n    \n    // Position camera\n    camera.position.z = 10;\n    \n    // Animation\n    let frame = 0;\n    const animate = () => {\n      frame = requestAnimationFrame(animate);\n      \n      // Rotate the orb slowly\n      orb.rotation.x += 0.0002;\n      orb.rotation.y += 0.0002;\n      innerOrb.rotation.x -= 0.0001;\n      innerOrb.rotation.y -= 0.0001;\n      \n      // Move country sprites\n      countrySprites.forEach(item => {\n        // Move in the direction with the defined speed\n        item.sprite.position.x += item.direction.x * item.speed;\n        item.sprite.position.y += item.direction.y * item.speed;\n        item.sprite.position.z += item.direction.z * item.speed;\n        \n        // Check if the sprite is too far from its initial position\n        const distance = new THREE.Vector3()\n          .subVectors(item.sprite.position, item.initialPosition)\n          .length();\n        \n        // If too far, reverse direction\n        if (distance > 1.5) {\n          item.direction.negate();\n        }\n        \n        // Always face the camera\n        item.sprite.lookAt(camera.position);\n      });\n      \n      renderer.render(scene, camera);\n    };\n    \n    animate();\n    \n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(frame);\n      \n      // Properly dispose of all resources\n      countrySprites.forEach(item => {\n        if (item.sprite.material.map) {\n          item.sprite.material.map.dispose();\n        }\n        item.sprite.material.dispose();\n      });\n      \n      orbGeometry.dispose();\n      orbMaterial.dispose();\n      innerOrbGeometry.dispose();\n      innerOrbMaterial.dispose();\n      \n      // Remove from DOM\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      \n      // Dispose renderer\n      renderer.dispose();\n    };\n  }, [countries]);\n  \n  return (\n    <div \n      ref={mountRef} \n      style={{ \n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 0,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default FloatingCountriesOrb;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}