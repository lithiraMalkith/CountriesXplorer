{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryzen pro\\\\Desktop\\\\Year 3 Sem 1\\\\AF\\\\Assignment 2\\\\frontend\\\\src\\\\components\\\\Globe\\\\SimpleGlobe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleGlobe = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000); // Black background\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 2.5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Clear existing canvas if any\n    if (mountRef.current.childNodes.length > 0) {\n      mountRef.current.removeChild(mountRef.current.childNodes[0]);\n    }\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create globe geometry\n    const globeGeometry = new THREE.SphereGeometry(1, 64, 64);\n\n    // Create globe material - x.ai style with white wireframe on black\n    const globeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x000000,\n      wireframe: true,\n      transparent: true,\n      opacity: 0.1\n    });\n    const globe = new THREE.Mesh(globeGeometry, globeMaterial);\n    scene.add(globe);\n\n    // Create a second sphere with points for the x.ai dot effect\n    const pointsGeometry = new THREE.SphereGeometry(1.02, 32, 32);\n    const pointsMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 0.02,\n      transparent: true,\n      opacity: 0.7\n    });\n    const points = new THREE.Points(pointsGeometry, pointsMaterial);\n    scene.add(points);\n\n    // Add a subtle glow effect\n    const glowGeometry = new THREE.SphereGeometry(1.05, 32, 32);\n    const glowMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        c: {\n          type: 'f',\n          value: 0.2\n        },\n        p: {\n          type: 'f',\n          value: 3.0\n        },\n        glowColor: {\n          type: 'c',\n          value: new THREE.Color(0x444444)\n        },\n        viewVector: {\n          type: 'v3',\n          value: camera.position\n        }\n      },\n      vertexShader: `\n        uniform vec3 viewVector;\n        varying float intensity;\n        void main() {\n          vec3 vNormal = normalize(normalMatrix * normal);\n          vec3 vNormel = normalize(normalMatrix * viewVector);\n          intensity = pow(0.4 - dot(vNormal, vNormel), 2.0);\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main() {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4(glow, 1.0);\n        }\n      `,\n      side: THREE.BackSide,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    });\n    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);\n    scene.add(glowMesh);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 3, 5);\n    scene.add(directionalLight);\n\n    // Add orbit controls with damping\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controls.enableZoom = false;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Update controls\n      controls.update();\n\n      // Slowly rotate the globe\n      globe.rotation.y += 0.001;\n      points.rotation.y += 0.001;\n\n      // Update glow effect\n      glowMaterial.uniforms.viewVector.value = new THREE.Vector3().subVectors(camera.position, glowMesh.position);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      scene.remove(globe);\n      scene.remove(points);\n      scene.remove(glowMesh);\n      scene.remove(ambientLight);\n      scene.remove(directionalLight);\n      globeGeometry.dispose();\n      globeMaterial.dispose();\n      pointsGeometry.dispose();\n      pointsMaterial.dispose();\n      glowGeometry.dispose();\n      glowMaterial.dispose();\n      renderer.dispose();\n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n      left: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleGlobe, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = SimpleGlobe;\nexport default SimpleGlobe;\nvar _c;\n$RefreshReg$(_c, \"SimpleGlobe\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","SimpleGlobe","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","current","childNodes","length","removeChild","appendChild","domElement","globeGeometry","SphereGeometry","globeMaterial","MeshBasicMaterial","color","wireframe","transparent","opacity","globe","Mesh","add","pointsGeometry","pointsMaterial","PointsMaterial","size","points","Points","glowGeometry","glowMaterial","ShaderMaterial","uniforms","c","type","value","p","glowColor","viewVector","vertexShader","fragmentShader","side","BackSide","blending","AdditiveBlending","glowMesh","ambientLight","AmbientLight","directionalLight","DirectionalLight","set","controls","enableDamping","dampingFactor","rotateSpeed","enableZoom","autoRotate","autoRotateSpeed","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","update","rotation","y","Vector3","subVectors","render","removeEventListener","remove","dispose","ref","style","width","height","top","left","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ryzen pro/Desktop/Year 3 Sem 1/AF/Assignment 2/frontend/src/components/Globe/SimpleGlobe.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst SimpleGlobe = () => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000); // Black background\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 2.5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    \n    // Clear existing canvas if any\n    if (mountRef.current.childNodes.length > 0) {\n      mountRef.current.removeChild(mountRef.current.childNodes[0]);\n    }\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create globe geometry\n    const globeGeometry = new THREE.SphereGeometry(1, 64, 64);\n    \n    // Create globe material - x.ai style with white wireframe on black\n    const globeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x000000,\n      wireframe: true,\n      transparent: true,\n      opacity: 0.1\n    });\n    \n    const globe = new THREE.Mesh(globeGeometry, globeMaterial);\n    scene.add(globe);\n\n    // Create a second sphere with points for the x.ai dot effect\n    const pointsGeometry = new THREE.SphereGeometry(1.02, 32, 32);\n    const pointsMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 0.02,\n      transparent: true,\n      opacity: 0.7\n    });\n    \n    const points = new THREE.Points(pointsGeometry, pointsMaterial);\n    scene.add(points);\n\n    // Add a subtle glow effect\n    const glowGeometry = new THREE.SphereGeometry(1.05, 32, 32);\n    const glowMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        c: { type: 'f', value: 0.2 },\n        p: { type: 'f', value: 3.0 },\n        glowColor: { type: 'c', value: new THREE.Color(0x444444) },\n        viewVector: { type: 'v3', value: camera.position }\n      },\n      vertexShader: `\n        uniform vec3 viewVector;\n        varying float intensity;\n        void main() {\n          vec3 vNormal = normalize(normalMatrix * normal);\n          vec3 vNormel = normalize(normalMatrix * viewVector);\n          intensity = pow(0.4 - dot(vNormal, vNormel), 2.0);\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main() {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4(glow, 1.0);\n        }\n      `,\n      side: THREE.BackSide,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    });\n\n    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);\n    scene.add(glowMesh);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 3, 5);\n    scene.add(directionalLight);\n\n    // Add orbit controls with damping\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controls.enableZoom = false;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n      // Update controls\n      controls.update();\n      \n      // Slowly rotate the globe\n      globe.rotation.y += 0.001;\n      points.rotation.y += 0.001;\n      \n      // Update glow effect\n      glowMaterial.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n        camera.position,\n        glowMesh.position\n      );\n      \n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      scene.remove(globe);\n      scene.remove(points);\n      scene.remove(glowMesh);\n      scene.remove(ambientLight);\n      scene.remove(directionalLight);\n      \n      globeGeometry.dispose();\n      globeMaterial.dispose();\n      pointsGeometry.dispose();\n      pointsMaterial.dispose();\n      glowGeometry.dispose();\n      glowMaterial.dispose();\n      \n      renderer.dispose();\n      \n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mountRef} \n      style={{ \n        width: '100%', \n        height: '100%',\n        position: 'absolute',\n        top: 0,\n        left: 0\n      }}\n    />\n  );\n};\n\nexport default SimpleGlobe;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAK,CAAC,CAAC;IAC/BD,KAAK,CAACE,UAAU,GAAG,IAAIT,KAAK,CAACU,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;;IAE9C;IACA,MAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDJ,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,GAAG;;IAEvB;IACA,MAAMC,QAAQ,GAAG,IAAIlB,KAAK,CAACmB,aAAa,CAAC;MAAEC,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAC1EH,QAAQ,CAACI,OAAO,CAACT,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDG,QAAQ,CAACK,aAAa,CAACV,MAAM,CAACW,gBAAgB,CAAC;;IAE/C;IACA,IAAIlB,QAAQ,CAACmB,OAAO,CAACC,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MAC1CrB,QAAQ,CAACmB,OAAO,CAACG,WAAW,CAACtB,QAAQ,CAACmB,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9D;IACApB,QAAQ,CAACmB,OAAO,CAACI,WAAW,CAACX,QAAQ,CAACY,UAAU,CAAC;;IAEjD;IACA,MAAMC,aAAa,GAAG,IAAI/B,KAAK,CAACgC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;;IAEzD;IACA,MAAMC,aAAa,GAAG,IAAIjC,KAAK,CAACkC,iBAAiB,CAAC;MAChDC,KAAK,EAAE,QAAQ;MACfC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAG,IAAIvC,KAAK,CAACwC,IAAI,CAACT,aAAa,EAAEE,aAAa,CAAC;IAC1D1B,KAAK,CAACkC,GAAG,CAACF,KAAK,CAAC;;IAEhB;IACA,MAAMG,cAAc,GAAG,IAAI1C,KAAK,CAACgC,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;IAC7D,MAAMW,cAAc,GAAG,IAAI3C,KAAK,CAAC4C,cAAc,CAAC;MAC9CT,KAAK,EAAE,QAAQ;MACfU,IAAI,EAAE,IAAI;MACVR,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,IAAI9C,KAAK,CAAC+C,MAAM,CAACL,cAAc,EAAEC,cAAc,CAAC;IAC/DpC,KAAK,CAACkC,GAAG,CAACK,MAAM,CAAC;;IAEjB;IACA,MAAME,YAAY,GAAG,IAAIhD,KAAK,CAACgC,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3D,MAAMiB,YAAY,GAAG,IAAIjD,KAAK,CAACkD,cAAc,CAAC;MAC5CC,QAAQ,EAAE;QACRC,CAAC,EAAE;UAAEC,IAAI,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAI,CAAC;QAC5BC,CAAC,EAAE;UAAEF,IAAI,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAI,CAAC;QAC5BE,SAAS,EAAE;UAAEH,IAAI,EAAE,GAAG;UAAEC,KAAK,EAAE,IAAItD,KAAK,CAACU,KAAK,CAAC,QAAQ;QAAE,CAAC;QAC1D+C,UAAU,EAAE;UAAEJ,IAAI,EAAE,IAAI;UAAEC,KAAK,EAAE3C,MAAM,CAACK;QAAS;MACnD,CAAC;MACD0C,YAAY,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDC,cAAc,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDC,IAAI,EAAE5D,KAAK,CAAC6D,QAAQ;MACpBC,QAAQ,EAAE9D,KAAK,CAAC+D,gBAAgB;MAChC1B,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,MAAM2B,QAAQ,GAAG,IAAIhE,KAAK,CAACwC,IAAI,CAACQ,YAAY,EAAEC,YAAY,CAAC;IAC3D1C,KAAK,CAACkC,GAAG,CAACuB,QAAQ,CAAC;;IAEnB;IACA,MAAMC,YAAY,GAAG,IAAIjE,KAAK,CAACkE,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC1D3D,KAAK,CAACkC,GAAG,CAACwB,YAAY,CAAC;;IAEvB;IACA,MAAME,gBAAgB,GAAG,IAAInE,KAAK,CAACoE,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC;IAClED,gBAAgB,CAACnD,QAAQ,CAACqD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtC9D,KAAK,CAACkC,GAAG,CAAC0B,gBAAgB,CAAC;;IAE3B;IACA,MAAMG,QAAQ,GAAG,IAAIrE,aAAa,CAACU,MAAM,EAAEO,QAAQ,CAACY,UAAU,CAAC;IAC/DwC,QAAQ,CAACC,aAAa,GAAG,IAAI;IAC7BD,QAAQ,CAACE,aAAa,GAAG,IAAI;IAC7BF,QAAQ,CAACG,WAAW,GAAG,GAAG;IAC1BH,QAAQ,CAACI,UAAU,GAAG,KAAK;IAC3BJ,QAAQ,CAACK,UAAU,GAAG,IAAI;IAC1BL,QAAQ,CAACM,eAAe,GAAG,GAAG;;IAE9B;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzBlE,MAAM,CAACmE,MAAM,GAAGjE,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtDJ,MAAM,CAACoE,sBAAsB,CAAC,CAAC;MAC/B7D,QAAQ,CAACI,OAAO,CAACT,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACzD,CAAC;IAEDF,MAAM,CAACmE,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;IAE/C;IACA,MAAMI,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;;MAE9B;MACAX,QAAQ,CAACa,MAAM,CAAC,CAAC;;MAEjB;MACA5C,KAAK,CAAC6C,QAAQ,CAACC,CAAC,IAAI,KAAK;MACzBvC,MAAM,CAACsC,QAAQ,CAACC,CAAC,IAAI,KAAK;;MAE1B;MACApC,YAAY,CAACE,QAAQ,CAACM,UAAU,CAACH,KAAK,GAAG,IAAItD,KAAK,CAACsF,OAAO,CAAC,CAAC,CAACC,UAAU,CACrE5E,MAAM,CAACK,QAAQ,EACfgD,QAAQ,CAAChD,QACX,CAAC;MAEDE,QAAQ,CAACsE,MAAM,CAACjF,KAAK,EAAEI,MAAM,CAAC;IAChC,CAAC;IAEDsE,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACXpE,MAAM,CAAC4E,mBAAmB,CAAC,QAAQ,EAAEZ,YAAY,CAAC;MAClDtE,KAAK,CAACmF,MAAM,CAACnD,KAAK,CAAC;MACnBhC,KAAK,CAACmF,MAAM,CAAC5C,MAAM,CAAC;MACpBvC,KAAK,CAACmF,MAAM,CAAC1B,QAAQ,CAAC;MACtBzD,KAAK,CAACmF,MAAM,CAACzB,YAAY,CAAC;MAC1B1D,KAAK,CAACmF,MAAM,CAACvB,gBAAgB,CAAC;MAE9BpC,aAAa,CAAC4D,OAAO,CAAC,CAAC;MACvB1D,aAAa,CAAC0D,OAAO,CAAC,CAAC;MACvBjD,cAAc,CAACiD,OAAO,CAAC,CAAC;MACxBhD,cAAc,CAACgD,OAAO,CAAC,CAAC;MACxB3C,YAAY,CAAC2C,OAAO,CAAC,CAAC;MACtB1C,YAAY,CAAC0C,OAAO,CAAC,CAAC;MAEtBzE,QAAQ,CAACyE,OAAO,CAAC,CAAC;MAElB,IAAIrF,QAAQ,CAACmB,OAAO,EAAE;QACpBnB,QAAQ,CAACmB,OAAO,CAACG,WAAW,CAACV,QAAQ,CAACY,UAAU,CAAC;MACnD;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA;IACEyF,GAAG,EAAEtF,QAAS;IACduF,KAAK,EAAE;MACLC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,MAAM;MACd/E,QAAQ,EAAE,UAAU;MACpBgF,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE;IACR;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAChG,EAAA,CA9KID,WAAW;AAAAkG,EAAA,GAAXlG,WAAW;AAgLjB,eAAeA,WAAW;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}