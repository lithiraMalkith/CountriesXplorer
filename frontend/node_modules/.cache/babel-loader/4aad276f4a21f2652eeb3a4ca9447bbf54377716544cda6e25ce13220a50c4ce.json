{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryzen pro\\\\Desktop\\\\Year 3 Sem 1\\\\AF\\\\Assignment 2\\\\frontend\\\\src\\\\components\\\\Globe\\\\EnhancedGlobe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { getAllCountries } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnhancedGlobe = () => {\n  _s();\n  const mountRef = useRef(null);\n  const [featuredCountries, setFeaturedCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Featured countries to display on the globe\n  const FEATURED_COUNTRY_CODES = ['USA', 'GBR', 'FRA', 'DEU', 'JPN', 'AUS', 'BRA', 'ZAF', 'IND', 'CAN'];\n  useEffect(() => {\n    // Fetch featured countries data\n    const fetchFeaturedCountries = async () => {\n      try {\n        const allCountries = await getAllCountries();\n        const featured = allCountries.filter(country => FEATURED_COUNTRY_CODES.includes(country.cca3));\n        setFeaturedCountries(featured);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching featured countries:', error);\n        setIsLoading(false);\n      }\n    };\n    fetchFeaturedCountries();\n  }, []);\n  useEffect(() => {\n    if (isLoading || featuredCountries.length === 0) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000); // Black background\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 2.5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Clear existing canvas if any\n    if (mountRef.current.childNodes.length > 0) {\n      mountRef.current.removeChild(mountRef.current.childNodes[0]);\n    }\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create globe geometry\n    const globeGeometry = new THREE.SphereGeometry(1, 64, 64);\n\n    // Create globe material - x.ai style with white wireframe on black\n    const globeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x000000,\n      wireframe: true,\n      transparent: true,\n      opacity: 0.1\n    });\n    const globe = new THREE.Mesh(globeGeometry, globeMaterial);\n    scene.add(globe);\n\n    // Create a second sphere with points for the x.ai dot effect\n    const pointsGeometry = new THREE.SphereGeometry(1.02, 32, 32);\n    const pointsMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 0.02,\n      transparent: true,\n      opacity: 0.7\n    });\n    const points = new THREE.Points(pointsGeometry, pointsMaterial);\n    scene.add(points);\n\n    // Add a subtle glow effect\n    const glowGeometry = new THREE.SphereGeometry(1.05, 32, 32);\n    const glowMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        c: {\n          type: 'f',\n          value: 0.2\n        },\n        p: {\n          type: 'f',\n          value: 3.0\n        },\n        glowColor: {\n          type: 'c',\n          value: new THREE.Color(0x444444)\n        },\n        viewVector: {\n          type: 'v3',\n          value: camera.position\n        }\n      },\n      vertexShader: `\n        uniform vec3 viewVector;\n        varying float intensity;\n        void main() {\n          vec3 vNormal = normalize(normalMatrix * normal);\n          vec3 vNormel = normalize(normalMatrix * viewVector);\n          intensity = pow(0.4 - dot(vNormal, vNormel), 2.0);\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main() {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4(glow, 1.0);\n        }\n      `,\n      side: THREE.BackSide,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    });\n    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);\n    scene.add(glowMesh);\n\n    // Add country markers\n    const countryMarkers = [];\n    featuredCountries.forEach(country => {\n      if (country.latlng && country.latlng.length >= 2) {\n        const lat = country.latlng[0];\n        const lng = country.latlng[1];\n\n        // Convert lat/lng to 3D position\n        const phi = (90 - lat) * (Math.PI / 180);\n        const theta = (lng + 180) * (Math.PI / 180);\n        const x = -1.05 * Math.sin(phi) * Math.cos(theta);\n        const y = 1.05 * Math.cos(phi);\n        const z = 1.05 * Math.sin(phi) * Math.sin(theta);\n\n        // Create marker\n        const markerGeometry = new THREE.SphereGeometry(0.02, 16, 16);\n        const markerMaterial = new THREE.MeshBasicMaterial({\n          color: 0x3b82f6,\n          // Blue color\n          transparent: true,\n          opacity: 0.8\n        });\n        const marker = new THREE.Mesh(markerGeometry, markerMaterial);\n        marker.position.set(x, y, z);\n\n        // Add pulse effect\n        const pulseGeometry = new THREE.SphereGeometry(0.02, 16, 16);\n        const pulseMaterial = new THREE.MeshBasicMaterial({\n          color: 0x3b82f6,\n          transparent: true,\n          opacity: 0.4\n        });\n        const pulse = new THREE.Mesh(pulseGeometry, pulseMaterial);\n        pulse.position.set(x, y, z);\n        pulse.scale.set(1, 1, 1);\n        pulse.userData = {\n          originalScale: 1,\n          growFactor: 1.5,\n          country: country\n        };\n        scene.add(marker);\n        scene.add(pulse);\n        countryMarkers.push({\n          marker,\n          pulse\n        });\n      }\n    });\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 3, 5);\n    scene.add(directionalLight);\n\n    // Add orbit controls with damping\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controls.enableZoom = false;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const clock = new THREE.Clock();\n    const animate = () => {\n      requestAnimationFrame(animate);\n      const elapsedTime = clock.getElapsedTime();\n\n      // Update controls\n      controls.update();\n\n      // Slowly rotate the globe\n      globe.rotation.y += 0.001;\n      points.rotation.y += 0.001;\n\n      // Update pulse effects\n      countryMarkers.forEach(({\n        pulse\n      }) => {\n        const pulsate = Math.sin(elapsedTime * 2) * 0.5 + 0.5;\n        const scale = pulse.userData.originalScale + pulsate * pulse.userData.growFactor;\n        pulse.scale.set(scale, scale, scale);\n        pulse.material.opacity = 0.4 * (1 - pulsate * 0.5);\n      });\n\n      // Update glow effect\n      glowMaterial.uniforms.viewVector.value = new THREE.Vector3().subVectors(camera.position, glowMesh.position);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      scene.remove(globe);\n      scene.remove(points);\n      scene.remove(glowMesh);\n      scene.remove(ambientLight);\n      scene.remove(directionalLight);\n      countryMarkers.forEach(({\n        marker,\n        pulse\n      }) => {\n        scene.remove(marker);\n        scene.remove(pulse);\n        marker.geometry.dispose();\n        marker.material.dispose();\n        pulse.geometry.dispose();\n        pulse.material.dispose();\n      });\n      globeGeometry.dispose();\n      globeMaterial.dispose();\n      pointsGeometry.dispose();\n      pointsMaterial.dispose();\n      glowGeometry.dispose();\n      glowMaterial.dispose();\n      renderer.dispose();\n      if (mountRef.current && mountRef.current.childNodes.length > 0) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [isLoading, featuredCountries]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n      left: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n_s(EnhancedGlobe, \"gkRURL5at+cpgd/BzOM1nsXpog4=\");\n_c = EnhancedGlobe;\nexport default EnhancedGlobe;\nvar _c;\n$RefreshReg$(_c, \"EnhancedGlobe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","getAllCountries","jsxDEV","_jsxDEV","EnhancedGlobe","_s","mountRef","featuredCountries","setFeaturedCountries","isLoading","setIsLoading","FEATURED_COUNTRY_CODES","fetchFeaturedCountries","allCountries","featured","filter","country","includes","cca3","error","console","length","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","current","childNodes","removeChild","appendChild","domElement","globeGeometry","SphereGeometry","globeMaterial","MeshBasicMaterial","color","wireframe","transparent","opacity","globe","Mesh","add","pointsGeometry","pointsMaterial","PointsMaterial","size","points","Points","glowGeometry","glowMaterial","ShaderMaterial","uniforms","c","type","value","p","glowColor","viewVector","vertexShader","fragmentShader","side","BackSide","blending","AdditiveBlending","glowMesh","countryMarkers","forEach","latlng","lat","lng","phi","Math","PI","theta","x","sin","cos","y","markerGeometry","markerMaterial","marker","set","pulseGeometry","pulseMaterial","pulse","scale","userData","originalScale","growFactor","push","ambientLight","AmbientLight","directionalLight","DirectionalLight","controls","enableDamping","dampingFactor","rotateSpeed","enableZoom","autoRotate","autoRotateSpeed","handleResize","aspect","updateProjectionMatrix","addEventListener","clock","Clock","animate","requestAnimationFrame","elapsedTime","getElapsedTime","update","rotation","pulsate","material","Vector3","subVectors","render","removeEventListener","remove","geometry","dispose","ref","style","width","height","top","left","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ryzen pro/Desktop/Year 3 Sem 1/AF/Assignment 2/frontend/src/components/Globe/EnhancedGlobe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { getAllCountries } from '../../services/api';\n\nconst EnhancedGlobe = () => {\n  const mountRef = useRef(null);\n  const [featuredCountries, setFeaturedCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Featured countries to display on the globe\n  const FEATURED_COUNTRY_CODES = ['USA', 'GBR', 'FRA', 'DEU', 'JPN', 'AUS', 'BRA', 'ZAF', 'IND', 'CAN'];\n\n  useEffect(() => {\n    // Fetch featured countries data\n    const fetchFeaturedCountries = async () => {\n      try {\n        const allCountries = await getAllCountries();\n        const featured = allCountries.filter(country => \n          FEATURED_COUNTRY_CODES.includes(country.cca3)\n        );\n        setFeaturedCountries(featured);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching featured countries:', error);\n        setIsLoading(false);\n      }\n    };\n\n    fetchFeaturedCountries();\n  }, []);\n\n  useEffect(() => {\n    if (isLoading || featuredCountries.length === 0) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000); // Black background\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 2.5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    \n    // Clear existing canvas if any\n    if (mountRef.current.childNodes.length > 0) {\n      mountRef.current.removeChild(mountRef.current.childNodes[0]);\n    }\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create globe geometry\n    const globeGeometry = new THREE.SphereGeometry(1, 64, 64);\n    \n    // Create globe material - x.ai style with white wireframe on black\n    const globeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x000000,\n      wireframe: true,\n      transparent: true,\n      opacity: 0.1\n    });\n    \n    const globe = new THREE.Mesh(globeGeometry, globeMaterial);\n    scene.add(globe);\n\n    // Create a second sphere with points for the x.ai dot effect\n    const pointsGeometry = new THREE.SphereGeometry(1.02, 32, 32);\n    const pointsMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 0.02,\n      transparent: true,\n      opacity: 0.7\n    });\n    \n    const points = new THREE.Points(pointsGeometry, pointsMaterial);\n    scene.add(points);\n\n    // Add a subtle glow effect\n    const glowGeometry = new THREE.SphereGeometry(1.05, 32, 32);\n    const glowMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        c: { type: 'f', value: 0.2 },\n        p: { type: 'f', value: 3.0 },\n        glowColor: { type: 'c', value: new THREE.Color(0x444444) },\n        viewVector: { type: 'v3', value: camera.position }\n      },\n      vertexShader: `\n        uniform vec3 viewVector;\n        varying float intensity;\n        void main() {\n          vec3 vNormal = normalize(normalMatrix * normal);\n          vec3 vNormel = normalize(normalMatrix * viewVector);\n          intensity = pow(0.4 - dot(vNormal, vNormel), 2.0);\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main() {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4(glow, 1.0);\n        }\n      `,\n      side: THREE.BackSide,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    });\n\n    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);\n    scene.add(glowMesh);\n\n    // Add country markers\n    const countryMarkers = [];\n    \n    featuredCountries.forEach(country => {\n      if (country.latlng && country.latlng.length >= 2) {\n        const lat = country.latlng[0];\n        const lng = country.latlng[1];\n        \n        // Convert lat/lng to 3D position\n        const phi = (90 - lat) * (Math.PI / 180);\n        const theta = (lng + 180) * (Math.PI / 180);\n        \n        const x = -1.05 * Math.sin(phi) * Math.cos(theta);\n        const y = 1.05 * Math.cos(phi);\n        const z = 1.05 * Math.sin(phi) * Math.sin(theta);\n        \n        // Create marker\n        const markerGeometry = new THREE.SphereGeometry(0.02, 16, 16);\n        const markerMaterial = new THREE.MeshBasicMaterial({ \n          color: 0x3b82f6, // Blue color\n          transparent: true,\n          opacity: 0.8\n        });\n        \n        const marker = new THREE.Mesh(markerGeometry, markerMaterial);\n        marker.position.set(x, y, z);\n        \n        // Add pulse effect\n        const pulseGeometry = new THREE.SphereGeometry(0.02, 16, 16);\n        const pulseMaterial = new THREE.MeshBasicMaterial({\n          color: 0x3b82f6,\n          transparent: true,\n          opacity: 0.4\n        });\n        \n        const pulse = new THREE.Mesh(pulseGeometry, pulseMaterial);\n        pulse.position.set(x, y, z);\n        pulse.scale.set(1, 1, 1);\n        pulse.userData = { \n          originalScale: 1,\n          growFactor: 1.5,\n          country: country\n        };\n        \n        scene.add(marker);\n        scene.add(pulse);\n        countryMarkers.push({ marker, pulse });\n      }\n    });\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 3, 5);\n    scene.add(directionalLight);\n\n    // Add orbit controls with damping\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controls.enableZoom = false;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const clock = new THREE.Clock();\n    \n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n      const elapsedTime = clock.getElapsedTime();\n      \n      // Update controls\n      controls.update();\n      \n      // Slowly rotate the globe\n      globe.rotation.y += 0.001;\n      points.rotation.y += 0.001;\n      \n      // Update pulse effects\n      countryMarkers.forEach(({ pulse }) => {\n        const pulsate = Math.sin(elapsedTime * 2) * 0.5 + 0.5;\n        const scale = pulse.userData.originalScale + pulsate * pulse.userData.growFactor;\n        pulse.scale.set(scale, scale, scale);\n        pulse.material.opacity = 0.4 * (1 - pulsate * 0.5);\n      });\n      \n      // Update glow effect\n      glowMaterial.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n        camera.position,\n        glowMesh.position\n      );\n      \n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      \n      scene.remove(globe);\n      scene.remove(points);\n      scene.remove(glowMesh);\n      scene.remove(ambientLight);\n      scene.remove(directionalLight);\n      \n      countryMarkers.forEach(({ marker, pulse }) => {\n        scene.remove(marker);\n        scene.remove(pulse);\n        marker.geometry.dispose();\n        marker.material.dispose();\n        pulse.geometry.dispose();\n        pulse.material.dispose();\n      });\n      \n      globeGeometry.dispose();\n      globeMaterial.dispose();\n      pointsGeometry.dispose();\n      pointsMaterial.dispose();\n      glowGeometry.dispose();\n      glowMaterial.dispose();\n      \n      renderer.dispose();\n      \n      if (mountRef.current && mountRef.current.childNodes.length > 0) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [isLoading, featuredCountries]);\n\n  return (\n    <div \n      ref={mountRef} \n      style={{ \n        width: '100%', \n        height: '100%',\n        position: 'absolute',\n        top: 0,\n        left: 0\n      }}\n    />\n  );\n};\n\nexport default EnhancedGlobe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}