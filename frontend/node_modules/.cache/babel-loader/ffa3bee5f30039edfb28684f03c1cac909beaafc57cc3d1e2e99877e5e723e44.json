{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://restcountries.com/v3.1';\n\n// Get all countries\nexport const getAllCountries = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/all`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching all countries:', error);\n    throw error;\n  }\n};\n\n// Search countries by name\nexport const getCountriesByName = async name => {\n  try {\n    const response = await axios.get(`${BASE_URL}/name/${name}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error searching for country \"${name}\":`, error);\n    return [];\n  }\n};\n\n// Get countries by region\nexport const getCountriesByRegion = async region => {\n  try {\n    const response = await axios.get(`${BASE_URL}/region/${region}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching countries in region \"${region}\":`, error);\n    throw error;\n  }\n};\n\n// Get country by code (alpha)\nexport const getCountryByCode = async code => {\n  try {\n    const response = await axios.get(`${BASE_URL}/alpha/${code}`);\n    return response.data[0];\n  } catch (error) {\n    console.error(`Error fetching country with code \"${code}\":`, error);\n    throw error;\n  }\n};\n\n// Get countries by language\nexport const getCountriesByLanguage = async language => {\n  try {\n    // First get all countries\n    const allCountries = await getAllCountries();\n\n    // Then filter by language\n    return allCountries.filter(country => {\n      if (country.languages) {\n        return Object.values(country.languages).some(lang => lang.toLowerCase().includes(language.toLowerCase()));\n      }\n      return false;\n    });\n  } catch (error) {\n    console.error(`Error fetching countries with language \"${language}\":`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","getAllCountries","response","get","data","error","console","getCountriesByName","name","getCountriesByRegion","region","getCountryByCode","code","getCountriesByLanguage","language","allCountries","filter","country","languages","Object","values","some","lang","toLowerCase","includes"],"sources":["C:/Users/ryzen pro/Desktop/Year 3 Sem 1/AF/Assignment 2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://restcountries.com/v3.1';\n\n// Get all countries\nexport const getAllCountries = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/all`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching all countries:', error);\n    throw error;\n  }\n};\n\n// Search countries by name\nexport const getCountriesByName = async (name) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/name/${name}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error searching for country \"${name}\":`, error);\n    return [];\n  }\n};\n\n// Get countries by region\nexport const getCountriesByRegion = async (region) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/region/${region}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching countries in region \"${region}\":`, error);\n    throw error;\n  }\n};\n\n// Get country by code (alpha)\nexport const getCountryByCode = async (code) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/alpha/${code}`);\n    return response.data[0];\n  } catch (error) {\n    console.error(`Error fetching country with code \"${code}\":`, error);\n    throw error;\n  }\n};\n\n// Get countries by language\nexport const getCountriesByLanguage = async (language) => {\n  try {\n    // First get all countries\n    const allCountries = await getAllCountries();\n    \n    // Then filter by language\n    return allCountries.filter(country => {\n      if (country.languages) {\n        return Object.values(country.languages)\n          .some(lang => lang.toLowerCase().includes(language.toLowerCase()));\n      }\n      return false;\n    });\n  } catch (error) {\n    console.error(`Error fetching countries with language \"${language}\":`, error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,gCAAgC;;AAEjD;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,QAAQ,MAAM,CAAC;IACnD,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAChD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,QAAQ,SAASQ,IAAI,EAAE,CAAC;IAC5D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgCG,IAAI,IAAI,EAAEH,KAAK,CAAC;IAC9D,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,oBAAoB,GAAG,MAAOC,MAAM,IAAK;EACpD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,QAAQ,WAAWU,MAAM,EAAE,CAAC;IAChE,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuCK,MAAM,IAAI,EAAEL,KAAK,CAAC;IACvE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,QAAQ,UAAUY,IAAI,EAAE,CAAC;IAC7D,OAAOV,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqCO,IAAI,IAAI,EAAEP,KAAK,CAAC;IACnE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EACxD,IAAI;IACF;IACA,MAAMC,YAAY,GAAG,MAAMd,eAAe,CAAC,CAAC;;IAE5C;IACA,OAAOc,YAAY,CAACC,MAAM,CAACC,OAAO,IAAI;MACpC,IAAIA,OAAO,CAACC,SAAS,EAAE;QACrB,OAAOC,MAAM,CAACC,MAAM,CAACH,OAAO,CAACC,SAAS,CAAC,CACpCG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACV,QAAQ,CAACS,WAAW,CAAC,CAAC,CAAC,CAAC;MACtE;MACA,OAAO,KAAK;IACd,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2CS,QAAQ,IAAI,EAAET,KAAK,CAAC;IAC7E,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}